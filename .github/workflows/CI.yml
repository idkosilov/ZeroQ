name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  rust-checks:
    name: Rust Formatting, Linting, and Compilation Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust (Pin Specific Version)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Show Rust version (for debugging)
        run: rustc --version && cargo --version

      - name: Run cargo fmt (Rust formatting)
        run: cargo fmt --check

      - name: Run cargo clippy (Linting)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run cargo check (Compilation check)
        run: cargo check --all-targets --all-features

  python-checks:
    name: Python Linting, Type Checking, and Testing (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: 3.10
          pyproject-file: 'pyproject.toml'

      - name: Run ruff
        run: uv run ruff check

      - name: Run mypy
        run: uv run mypy fastqueue tests

  build:
    runs-on: ${{ matrix.runner }}
    needs: [ rust-checks, python-checks ]
    strategy:
      matrix:
        include:
          # Linux (manylinux = auto)
          - os: linux
            runner: ubuntu-22.04
            target: x86_64
            manylinux: auto
            artifact_prefix: wheels-linux
          - os: linux
            runner: ubuntu-22.04
            target: x86
            manylinux: auto
            artifact_prefix: wheels-linux
          - os: linux
            runner: ubuntu-22.04
            target: aarch64
            manylinux: auto
            artifact_prefix: wheels-linux
          - os: linux
            runner: ubuntu-22.04
            target: armv7
            manylinux: auto
            artifact_prefix: wheels-linux
          - os: linux
            runner: ubuntu-22.04
            target: s390x
            manylinux: auto
            artifact_prefix: wheels-linux
          - os: linux
            runner: ubuntu-22.04
            target: ppc64le
            manylinux: auto
            artifact_prefix: wheels-linux
          # Musllinux
          - os: musllinux
            runner: ubuntu-22.04
            target: x86_64
            manylinux: musllinux_1_2
            artifact_prefix: wheels-musllinux
          - os: musllinux
            runner: ubuntu-22.04
            target: x86
            manylinux: musllinux_1_2
            artifact_prefix: wheels-musllinux
          - os: musllinux
            runner: ubuntu-22.04
            target: aarch64
            manylinux: musllinux_1_2
            artifact_prefix: wheels-musllinux
          - os: musllinux
            runner: ubuntu-22.04
            target: armv7
            manylinux: musllinux_1_2
            artifact_prefix: wheels-musllinux
          - os: windows
            runner: windows-latest
            target: x64
            manylinux: ''
            artifact_prefix: wheels-windows
            architecture: x64
          - os: windows
            runner: windows-latest
            target: x86
            manylinux: ''
            artifact_prefix: wheels-windows
            architecture: x86
          # macOS
          - os: macos
            runner: macos-13
            target: x86_64
            manylinux: ''
            artifact_prefix: wheels-macos
          - os: macos
            runner: macos-14
            target: aarch64
            manylinux: ''
            artifact_prefix: wheels-macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (Windows)
        if: ${{ matrix.os == 'windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: ${{ matrix.architecture }}

      - name: Set up Python (Non-Windows)
        if: ${{ matrix.os != 'windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: ${{ matrix.manylinux }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_prefix }}-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [build, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
